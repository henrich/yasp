#!/bin/bash -xv
#
# yasp - Yet Another Simple/Speedy Piuparts
#
# 2013 Hideki Yamane <henrich@debian.or.jp>
# 
#-------------------------------------------------------------------------------

set -e

export LANG=C
export LC_ALL=C

if [ ! -z `uname -o | grep Linux` ]; then
    kernel="Linux"
    echo "kernel: Linux"
    echo ""
elif [ ! -z `uname -o | grep BSD` ]; then
    kernel="BSD"
    echo "kernel: *BSD"
    echo "it doesn't support aufs, aborting..."
    exit 1
else
    echo "kernel: unknown, aborting..."
    exit 1
fi

#FIXME: kFreeBSD support?
if [ "$kernel" = Linux ]; then
    config="/boot/config-`uname -a|cut -d' ' -f3`"
else
    exit 1
fi

if [ -z `grep CONFIG_AUFS_FS $config` ]; then
     echo "Your kernel seems to not support aufs, aborting..."
     exit 1
fi

ARCH=`dpkg-architecture -qDEB_HOST_ARCH`

#-------------------------------------------------------------------------------
# read configuration
#-------------------------------------------------------------------------------

if [ -f /etc/yasp.conf ]; then
    . /etc/yasp.conf
fi


if [ -z "$yasp_dir" -o -z "$distro" -o -z "$mirror" ]; then
   echo "Something wrong with configuration... check your yasp.conf"
   exit 1
fi

if [ -d /usr/lib/yasp ]; then
    . /usr/lib/yasp/*
fi

create()
{
#-------------------------------------------------------------------------------
# prepare directories
#-------------------------------------------------------------------------------
for i in $distro
do
  if [ ! -d "$yasp_dir"/base/"$i" ]; then
      mkdir -p "$yasp_dir"/base/"$i"
  fi
  if [ ! -d "$yasp_dir"/aptcache/"$i"/var/cache/apt/archives ]; then
      mkdir -p "$yasp_dir"/aptcache/"$i"/var/cache/apt/archives
  fi
done

if [ ! -d "$yasp_dir"/aptcache/host/var/cache/apt ]; then
   mkdir -p "$yasp_dir"/aptcache/host/var/cache/apt
fi

if [ ! -f "$yasp_dir"/aptcache/host/var/cache/apt/archives ]; then
    (cd "$yasp_dir"/aptcache/host/var/cache/apt; ln -s /var/cache/apt/archives archives)
fi

for dir in working mountdir failed
do
  if [ ! -d "$yasp_dir"/"$dir" ]; then
      mkdir "$yasp_dir"/"$dir"
  fi
done

#-------------------------------------------------------------------------------
# create base cow: use files if it exists, -P = base.tgz, -C = base.cow
#-------------------------------------------------------------------------------

if [ -d "$basecow" -o "$2" = -C ]; then
  basedistro=`cat /var/cache/pbuilder/base.cow/etc/apt/sources.list | head -n1 |cut -d' ' -f3`
  if [ ! -d "$yasp_dir"/base/"$basedistro"/etc ]; then
      cp -arp "$basecow"/* "$yasp_dir"/base/"$basedistro"
  fi
elif [ -f "$basetgz" -o "$2" = -P ]; then
  basedistro=`cat `tar xvf "$basetgz" etc/apt/sources.list` |head -n1 |cut -d' ' -f3`
  if [ ! -d "$yasp_dir"/base/"$basedistro"/etc ]; then
      tar -C "$yasp_dir"/base/"$basedistro" -xf "$basetgz" 
  fi
fi
}

base_update()
{
for i in $distro
do
  if [ -d "$yasp_dir"/base/"$i"/etc ]; then
      chroot "$yasp_dir"/base/"$i" apt-get -qq update
      chroot "$yasp_dir"/base/"$i" apt-get -dyqq upgrade
  else
      debootstrap "$i" "$yasp_dir"/base/"$i" "$mirror"
  fi
done
}


case "$1" in
    init)
    create
    base_update
    ;;

    base-update)
    base_update
    ;;

    test)

# get package name from changes file, e.g. hail_0.8+0.11.37389dbf9b-1_amd64.changes
#FIXME: now yasp can only accept .changes file, however probably user want to test .debs

packagefile=`echo $2|grep .changes$`
srcpackage=`echo $2|cut -d'_' -f1`

if [ -z "$packagefile" ]; then
    echo "Please specify .changes file"
    exit 1
else
    package=`cat $packagefile | cut -d' ' -f4|grep .deb$|sort|uniq|cut -d'_' -f1`
fi

# cache *.deb to aptcache

for i in $distro
do
    chroot "$yasp_dir"/base/"$i" apt-get -qq update
    if [ ! -z "$package" ]; then
      for p in $package
      do
          exec_date=`date +%Y%m%d%H%M%S`
          tmpmountdir=`mktemp -d --tmpdir="$yasp_dir"/mountdir --suffix=_"$p"_"$i"_"$exec_date" yaspXXXXX`
          mount -t aufs -o br="$yasp_dir"/aptcache/"$i":"$yasp_dir"/base/"$i"=ro:"$yasp_dir"/aptcache/host=ro none "$tmpmountdir"
	  set +e
          pkgcheck=`chroot "$yasp_dir"/base/"$i" apt-cache show -q "$p" 2>&1`
          set -e
	  if [ ! "$pkgcheck" = "E: No packages found" ]; then
              echo "caching .deb files for $p..."
              chroot "$tmpmountdir" apt-get -dyqq install "$p"
	  else
	      not_upgrade="yes"
          fi
          umount "$tmpmountdir" && rmdir "$tmpmountdir"
      done
    fi
done

# install, uninstall, purge and upgrade test

packagelist=`cat "$packagefile" |cut -d' ' -f4|grep .deb$|sort|uniq|tr '\n' ' '`
for i in $distro
do
	workdir=`mktemp -d --tmpdir="$yasp_dir"/working --suffix=_"$i"_"$exec_date" ${srcpackage}XXXXX`
        tmpmountdir=`mktemp -d --tmpdir="$yasp_dir"/mountdir --suffix=_"$i"_"$exec_date" ${srcpackage}XXXXX`
        mount -t aufs -o br="$workdir":"$yasp_dir"/aptcache/"$i"=ro:"$yasp_dir"/base/"$i"=ro:"$yasp_dir"/aptcache/host=ro none "$tmpmountdir"
	mount --bind /proc "$tmpmountdir"/proc
	mount --bind /dev/pts "$tmpmountdir"/dev/pts
	chroot "$tmpmountdir" mkdir -p "$yasp_dir"/aptcache/"$i"
        cp -f $packagelist "$tmpmountdir"/"$yasp_dir"/aptcache/"$i"/

	# inside chroot
	lst_before=`mktemp ${srcpackage}XXXXX`
	chroot "$tmpmountdir" dpkg --get-selections > /tmp/"$lst_before"
	set +e
	echo -e "${start_yellow}INSTALL${end_color}: install package(s)..."
	for pkg in $packagelist
	do
	  chroot "$tmpmountdir" dpkg -i "$yasp_dir"/aptcache/"$i"/"$pkg" >/dev/null 2>&1
	done
	echo "(Please ignore debconf warnings)"
	set -e
	chroot "$tmpmountdir" apt-get -fyqq install >/dev/null 2>&1

        #-------------------------------------------------------------------------------
	# remove
        #-------------------------------------------------------------------------------
	workdir_rm=`mktemp -d --tmpdir="$yasp_dir"/working --suffix=_"$srcpackage"_"$i"_"$exec_date" yaspXXXXX`
	mount -o remount,append:"$workdir_rm" "$tmpmountdir"
	lst_after=`mktemp ${srcpackage}XXXXX`
	chroot "$tmpmountdir" dpkg --get-selections > /tmp/"$lst_after"
	lst_diff=`mktemp ${srcpackage}XXXXX`
	diff -u /tmp/"$lst_before" /tmp/"$lst_after"|grep '^+'|cut -f1|sed -e s/^+// -e s/:"$ARCH"// -e s%^++\ */tmp/.*%% > /tmp/"$lst_diff"
	cp /tmp/"$lst_diff" "$tmpmountdir"/tmp
	echo -e "${start_yellow}REMOVE${end_color}: remove package(s)..."
	echo "(Please ignore debconf warnings)"
	chroot "$tmpmountdir" dpkg --remove `cat /tmp/$lst_diff` > /dev/null 2>&1
	mount -o remount,del:"$workdir_rm" "$tmpmountdir"

        #-------------------------------------------------------------------------------
	# purge
        #-------------------------------------------------------------------------------
	workdir_purge=`mktemp -d --tmpdir="$yasp_dir"/working --suffix=_"$srcpackage"_"$i"_"$exec_date" yaspXXXXX`
	mount -o remount,append:"$workdir_purge" "$tmpmountdir"
	lst_after=`mktemp ${srcpackage}XXXXX`
        chroot "$tmpmountdir" dpkg --get-selections > /tmp/"$lst_after"
        lst_diff=`mktemp ${srcpackage}XXXXX`
	diff -u /tmp/"$lst_before" /tmp/"$lst_after"|grep '^+'|cut -f1|sed -e s/^+// -e s/:"$ARCH"// -e s%^++\ */tmp/.*%% > /tmp/"$lst_diff"
        cp /tmp/"$lst_diff" "$tmpmountdir"/tmp; rm /tmp/"$lst_after"
	echo -e "${start_yellow}PURGE${end_color}: purge package(s)..."
	echo "(Please ignore debconf warnings)"
	chroot "$tmpmountdir" dpkg --purge `cat /tmp/$lst_diff` > /dev/null 2>&1
	chroot "$tmpmountdir" rm /tmp/$lst_diff
	mount -o remount,del:"$workdir_purge" "$tmpmountdir"

        #-------------------------------------------------------------------------------
	# upgrade
        #-------------------------------------------------------------------------------
	if [ -z $not_upgrade ]; then
	    chroot "$tmpmountdir" rm /tmp/$lst_diff
	    mount -o remount,del:"$workdir" "$tmpmountdir"
	    
	    workdir_upgrade=`mktemp -d --tmpdir="$yasp_dir"/working --suffix=_"$srcpackage"_"$i"_"$exec_date" yaspXXXXX`
	    mount -o remount,append:"$workdir_upgrade" "$tmpmountdir"
            cp -f $packagelist "$tmpmountdir"/"$yasp_dir"/aptcache/"$i"/
	    echo -e "${start_yellow}UPGRADE${end_color}: upgrade package(s)..."
	    echo "(Please ignore debconf warnings)"
	    chroot "$tmpmountdir" apt-get install -yfqq $packagelist
	    chroot "$tmpmountdir" dpkg -i "$yasp_dir"/aptcache/"$i"/*.deb >/dev/null 2>&1
	    mount -o remount,del:"$workdir_upgrade" "$tmpmountdir"
	fi

	# throw chroot away...
	rm -rf "$workdir" "$workdir_rm" 
	umount "$tmpmountdir"/proc && umount "$tmpmountdir"/dev/pts && umount -f "$tmpmountdir"
done
    echo -e "${start_green}PASS: installation test${end_color}"
    ;;
#-------------------------------------------------------------------------------

    help | *)
    cat << END 
    Usage: yasp (init|base-update|test <changes file> |help)

    Option:
      init        : create COW base environment for each distribution
      base-update : update COW base environment for each distribution
      test        : specify changes file and exec test
                    (install/uninstall/remove/purge/uninstall)
      help        : show this message
END

    ;;
esac

